#!/bin/bash
#SBATCH -J eifex_recom
##SBATCH -p mpp
#SBATCH --account=biogeo.p_ironmod
#SBATCH -n 4
#SBATCH --cpus-per-task=2
#SBATCH -t 00:30:00
#SBATCH -o output.txt

# list of hosts that you are running on
hostlist=$(scontrol show hostnames | tr '\n' ',' | rev | cut -c 2- | rev)
echo "hosts: $hostlist"
umask 022

# load modules (to be sure they are really loaded)
module purge # to remove anything that may conflict with ifort
module load intel-oneapi-compilers
# module load intel-oneapi-mkl # not sure if this is necessary
module load intel-oneapi-mpi
module load netcdf-fortran/4.5.4-oneapi2022.1.0

ulimit -s 1048576

#export I_MPI_PIN=1 # binds mpi task to given cores
#export I_MPI_FABRICS=shm:tmi # very important if you want to run on more than one node!!!
#export MALLOC_MMAP_MAX_=0
#export OMP_NUM_THREADS=${nthreads}
export OMP_NUM_THREADS=1
#export OMP_PROC_BIND=close

cd ${SLURM_SUBMIT_DIR}

# show number of tasks, cpus,...
echo "SLURM_NTASKS        : $SLURM_NTASKS"
echo "SLURM_TASKS_PER_NODE: $SLURM_TASKS_PER_NODE"
echo "SLURM_CPUS_PER_TASK : $SLURM_CPUS_PER_TASK"
echo "OMP_NUM_THREADS     : $OMP_NUM_THREADS"
echo "OMP_PROC_BIND       : $OMP_PROC_BIND"

optdir="/albedo/work/user/mlosch/ANTXXI-3/MITgcm_config/opt01"
myiter=192
cat > data.optim <<EOF #
# ********************************
# Off-line optimization parameters
# ********************************
&OPTIM
 optimcycle=$myiter,
 numiter=200,
 nfunc=10,
 dfminFrac = 0.1,
 iprint=10,
 nupdate=8,
/

&M1QN3
/
EOF

exe=../build_recom/mitgcmuv

# format iteration count
it=`echo $myiter | awk '{printf "%04i",$1}'`
itten=`echo $myiter | awk '{printf "%010i",$1}'`
echo "iteration ${myiter}"

\cp -f ${optdir}/xx_*.${itten}.??ta .
\cp -f ${optdir}/xx_*.${itten}.*.??ta .
#ln -s ${optdir}/data.ctrl .
ln -s ${optdir}/data.err .
ln -s ../input_recom/* . > /dev/null 2>&1
ln -s ../input/* . > /dev/null 2>&1

echo "srun --cpu_bind=cores $exe"
srun --cpu_bind=cores $exe

echo "cleaning up"
\cp -rf STDOUT.0000 stdout.$it

\rm -rf tape*
#find . -type l -exec rm {} \;
#\rm -rf *.log
