From: Boris Cisewski <bcisewski@awi-bremerhaven.de>
Date: 12 October 2006 12:03:39 GMT+02:00
To: Martin Losch <mlosch@awi-bremerhaven.de>
Subject: CTD-MLD, MSS-AMLD, MSS-MLD

Hallo Martin,

die folgenden Ascii-Tabelle enthalten Stationnummer, Stationszeitpunkt (in laufenden Tagen des Jahres), geo. Länge und Breite,
sowie AMLD (nach subjektiver Analyse) und MLD (nach sigma-Kriterium) für alle vorliegenden MSS-Stationen sowie CTD-Stationen.

Da die meisten MSS-Profile auf einer Stationen innerhalb einer Stunde gemessen worden sind, wäre es am günstigsten,
wenn Du Deine Kappa-Profile auf die von mir angegeben Stationszeitpunkte interpolieren könntest.

Zur Sicherheit habe ich Dir ein Matlabskript beigefügt, welches die Tage des Jahres in das aktuelle Datum umrechnet.

>> mss_time=to_date(2004,41.8566)

mss_time =

2004/02/11 20:33:30

Nur zur Kontrolle ;-).

Viele Grüße
  Boris

-- 
**********************************************
Dr. Boris Cisewski
Alfred-Wegener-Institut
für Polar- und Meeresforschung
Postfach 120161
D-27515 Bremerhaven

e-mail: bcisewski@awi-bremerhaven.de
fax   :   +49 -471 4831 1797
phone :   +49 -471 4831 1816
**********************************************

function ymdhms = to_date(year_base, dec_day, output_type);
%
% function ymdhms = to_date(year_base, dec_day, output_type)
% returns ymdhms  equivalent to decimal day arg
% year_base (and year in output) is 4-digit, NOT (year-1900)
% output_type is optional string:
%     'string' or 's' (default) yields string output
%     'numeric' or 'n' yields numeric array output
% If dec_day is a matrix with N elements, ymdhms will be
% either an array of N strings, or an Nx6 array with columns
%        [yr mo da hr mn sc]
% If dec_day has N elements, year_base must have either 1 or N.
%
% Note: this function rounds to the nearest second.

% 93/02/10 JR
% 95/12/03 EF: modified for vector arguments and matrix output.
%              Algorithm changed to fix bugs for dec_day large,
%              or dec_day < 0.
% 2004/05/11 EF: modified to use datavec/datenum
% 2004/06/07 EF: workaround for datevec bug



n_dd = length(dec_day);
year_base = year_base(:);
n_yb = length(year_base);

if (n_yb ~= 1 & n_yb ~= n_dd)
   help to_date
   error('Year_base must be scalar, or match dec_day');
end

if (any(year_base < 1000))
   disp('WARNING: in to_date, year_base should be full year, not year-1900');
end

% Add 0.01 s to the decimal day after rounding to the nearest
% second; this should avoid a bug in datevec which otherwise can
% cause a seconds = 60 error.
dec_day = (0.01 + round(dec_day(:)*86400))/86400;

d0 = datenum(year_base, ones(n_yb, 1), ones(n_yb, 1));
[Y, M, D, H, Mi, S] = datevec(d0 + dec_day);

%% 2004/12/23; reformatting with %02d due to version R14 bugs
%% ... like cockroaches, we Don't Like Them.
%% the extra 0.01 seconds should guarentee that floor(S) is nonnegative
S = floor(S);

ymdhms = [Y(:), M(:), D(:), H(:), Mi(:), S(:)];

if nargin == 2 | strcmpi(output_type, 's')  | strcmpi(output_type, 'string'),
%% recasting as integers (2004/12/23):
   ymdhms = sprintf('%04d/%02d/%02d %02d:%02d:%02d', ymdhms.');

   ymdhms = reshape(ymdhms, 19, n_dd).';
else
   ymdhms(:,6) = round(ymdhms(:,6));
end

return

if 0 % Old version.
   %
   if (nargin < 2 | nargin > 3)
     help to_date
     error('Incorrect number of arguments.')
   end

   if (nargin == 2)
      output_type = 's';
   end

   c = output_type(1);
   if (c == 's' | c == 'S')
      string_out = 1;
   elseif (c == 'n' | c == 'N')
      string_out = 0;
   else
      help to_date
      error('output_type string must start with s or n');
   end


   % First, round to the nearest second, since we will be
   % needing integer seconds: ***note change from old behavior***
   % dec_day = round(dec_day(:)*86400)/86400;
   dd_int = floor(dec_day);
   dd_pos = dec_day - dd_int;  % Positive, 0 to 1.


   dd_secs = round(dd_pos * 86400);
   second = round(rem(dd_secs,60));   % round is needed because of truncation error

   dd_mins = round((dd_secs - second)/60);
   minute = round(rem(dd_mins, 60));

   dd_hrs = round((dd_mins - minute) / 60);
   hour = round(rem(dd_hrs, 24));




   % integer seconds since start of year 1:
   secs = to_sec([year_base ones(n_yb,2) zeros(n_yb,3)]) + (dd_int * 86400);
   days1 = round(secs / 86400);         % whole days since start of year 1

   year   = 1 + round(days1 / 365.25);   % first guess at year
   finished = 0;
   itcount = 0;
   while (~finished),
      % seconds to start of "year":
      s1   = to_sec([year ones(n_dd,2) zeros(n_dd,3)]);
      % whole days from start of "year" to dec_day:
      days   = days1 - round(s1/86400);
      nonleap_mask = ( rem(year, 4) > 0 | (rem(year,100) == 0 & rem(year,400) ~= 0) );
      leap_mask = ~nonleap_mask;
      iless = (days < 0);
      imore = (leap_mask & (days >= 366)) | (nonleap_mask & (days >= 365));

      finished = 1;
      if (any(iless)),
         year(iless) = year(iless) - 1;
         finished = 0;
      end
      if (any(imore)),
         year(imore) = year(imore) + 1;
         finished = 0;
      end
      itcount = itcount + 1;
      if itcount > 100,
         disp('Iterations exceeded 100 in to_date.')
         error('Please tell EF  exact input values, so problem can be duplicated.');
      end
   end

   c_norm= [0 31 59 90 120 151 181 212 243 273 304 334];
   c_leap= [0 31 60 91 121 152 182 213 244 274 305 335];
   cumdays = c_norm(ones(n_dd,1),:) .* nonleap_mask(:,ones(1,12)) ...
           + c_leap(ones(n_dd,1),:) .* leap_mask(:,ones(1,12));

   mx = cumdays <= days(:,ones(1,12));
   month = sum(mx.').';

   cumdays = c_norm(month).' .* nonleap_mask + c_leap(month).' .* leap_mask;

   day = round(1 + days - cumdays);  % was "fix"

   ymdhms = [year month day hour minute second];

   if (string_out)
      ymdhms = sprintf('%04.0f/%02.0f/%02.0f %02.0f:%02.0f:%02.0f', ...
                         ymdhms.');
      ymdhms = reshape(ymdhms, 19, n_dd).';
   end

end
% ST  JDays    Lon     Lat        MLD  aMLD
42407 41.8566  2.2586  -49.4050   108    39
42412 41.9747  2.2634  -49.4042   124   111
42602 43.5649  2.2670  -49.4842   109    57
50804 52.4017  2.0437  -49.1887   107    37
50807 52.5177  2.0387  -49.1714   107   113
50902 53.2969  2.0075  -49.0014    72    47
51304 57.8354  2.1385  -49.6206    51    36
51321 58.3757  1.9192  -49.5538    97    72
51419 60.2760  2.3389  -49.2625    83    83
54317 63.5066  2.4577  -49.5208   105    96
54402 64.6410  2.1229  -49.4748   102    86
54422 65.5563  2.0216  -49.5118   116   116 
54425 65.6431  2.0087  -49.5072   116   125
54450 66.3441  1.8974  -49.4381   117   117
54455 66.5656  1.8845  -49.4140    97    82
54459 66.7090  1.8643  -49.3963   127   112
54502 67.3479  1.8564  -49.2470   111   100
54603 68.5854  2.1747  -49.4107    97    69
54610 68.7576  2.1485  -49.4408    93    89
54701 69.2781  2.0383  -49.3708    96    87
54801 69.3743  2.1549  -49.2919   100    79
54901 69.4722  2.2563  -49.2199   124   121
55001 69.5743  2.3722  -49.1506   115   113
55101 69.6712  2.4854  -49.0836    82    28
55201 69.7656  2.5987  -49.0153    32    23
55314 71.3233  2.3721  -49.5338   103    96
56701 72.4816  2.4407  -49.6701    85    86
56801 72.6076  2.5691  -49.8333    45    43
56901 72.7403  2.7003  -49.9958    57    49
58013 75.4667  2.3266  -49.1254   115   103
59108 78.5049  2.4195  -49.4316   114   112 
59313 79.2924  2.4414  -49.4839   110   100
% ST  JDays    Lon     Lat      MLD 
42403 41.7792  2.2513 49.3999   114
42408 41.8778  2.2585 49.4055   115
42413 41.9903  2.2655 49.4073   130
42417 42.0604  2.2605 49.4161   119
42420 42.1361  2.2574 49.4255   117
42422 42.2771  2.2573 49.4324   134
42601 43.5174  2.2658 49.4813   114
42604 43.6090  2.2647 49.4802    93
42607 43.6847  2.2209 49.4849    96
42701 43.7951  2.0832 49.2003   104
42706 43.8840  2.1163 49.2087    64
44901 46.0062  1.9370 48.9986    95
45001 46.1014  1.9359 49.1994   121
45101 46.1868  1.9340 49.3990    65
45201 46.2757  1.9349 49.5987    61
46302 47.4444  2.2415 49.6033    64
46401 47.5215  2.2494 49.4005    87
46502 47.6771  2.2488 49.2013    94
46602 47.7965  2.2557 49.0061   116
46701 47.8910  2.2552 48.7998    64
46801 48.0319  2.5548 48.7997    75
46901 48.1076  2.5520 49.0006   105
47001 48.1778  2.5496 49.2006   121
47101 48.2486  2.5499 49.4015    77
50802 52.3285  2.0077 49.2021   124
50805 52.4597  2.0348 49.1817   116
50816 52.6924  2.0642 49.1784   105
50818 52.8486  2.0005 49.2074   137
50822 52.9243  2.0228 49.1937    95
50901 53.2521  2.0032 49.0008    80
50904 53.3208  2.0033 48.9993    63
50913 53.4910  2.0140 49.0013    90
50916 53.5813  2.0491 48.9960    75
51101 54.7826  2.3724 49.3011   118
51105 54.8361  2.3686 49.3078   115
51109 54.8896  2.3764 49.3169   103
51112 54.9715  2.3877 49.2981    99
51303 57.7875  2.1516 49.6161    46
51305 57.8701  2.1107 49.6017    31
51312 58.0354  2.0564 49.5947    66
51316 58.1083  2.0362 49.5914    86
51318 58.1521  2.0263 49.5889    80
51402 59.7465  2.3357 49.2576    78
51406 59.7986  2.3365 49.2721    78
51413 59.9201  2.3386 49.3037    55
51418 59.9944  2.3531 49.3296    78
51501 60.6333  2.1222 49.0846   129
51601 60.6931  2.1166 49.1657   110
51701 60.7431  2.2555 49.1761   109
51801 60.8153  2.1195 49.2489    93
51901 60.8812  2.1169 49.3338    88
52001 60.9437  2.1189 49.2840   113
52101 61.6847  2.1176 49.2155   123
52201 61.7285  2.1162 49.1505    96
52301 61.7833  2.1177 49.0846   117
52401 61.8257  2.1132 49.0175   114
52501 61.8792  2.1175 48.9511    82
52601 61.9264  2.1212 49.0183   102
52701 61.9743  2.1177 49.0844   104
52801 62.0243  2.1225 49.1487    99
52901 62.0792  2.1167 49.2170   101
53001 62.1292  2.1165 49.2826   103
53101 62.1799  2.1176 49.3487   106
53201 62.2208  2.1168 49.2824   100
53301 62.2604  2.1160 49.2161   110
53401 62.3076  2.1171 49.1501    94
53501 62.3611  2.1158 49.0830   116
53601 62.4229  2.1197 49.0153    65
53701 62.4875  2.1178 48.9520    97
53801 62.5437  2.1182 49.0161    88
53901 62.6000  2.1147 49.0813    93
54001 62.6528  2.1155 49.1487   106
54101 62.7319  2.1166 49.2828   128
54305 63.1410  2.4482 49.4468   109
54308 63.2181  2.4564 49.4637   110
54310 63.2875  2.4553 49.4793   136
54315 63.4437  2.4577 49.5134   105
54403 64.6701  2.1212 49.4765   110
54405 64.7521  2.1193 49.4828    88
54406 64.7847  2.1183 49.4820    95
54407 64.8486  2.1147 49.4846   102
54409 64.9229  2.1061 49.4901   105
54410 64.9812  2.1020 49.4974   113
54411 65.0833  2.0876 49.5024   100
54412 65.1868  2.0737 49.5062   110
54414 65.2500  2.0638 49.5097   113
54416 65.3583  2.0502 49.5173   112
54418 65.4264  2.0468 49.5172   112
54420 65.5188  2.0298 49.5136   101
54424 65.5986  2.0216 49.5111   122
54426 65.6743  1.9937 49.5029   128
54429 65.7521  1.9959 49.4953   124
54430 65.7840  1.9887 49.4916   127
54432 65.8396  1.9744 49.4911   100
54435 65.9194  1.9620 49.4808    88
54439 65.9806  1.9548 49.4775   103
54442 66.0868  1.9492 49.4681   114
54446 66.1896  1.9340 49.4563   114
54448 66.2562  1.9391 49.4446    96
54453 66.4403  1.8335 49.4253   100
54456 66.6056  1.8809 49.4025   105
54458 66.6431  1.8799 49.3979   105
54460 66.7681  1.8660 49.3853   114
54463 66.8472  1.8670 49.3700   103
54501 67.2708  1.8368 49.2510   108
54602 68.5292  2.1938 49.4031    88
54605 68.6472  2.1593 49.4202   104
54607 68.6910  2.1571 49.4247    99
54614 68.8590  2.1426 49.4577   118
54619 68.9736  2.1225 49.4609   109
54622 69.0521  2.1050 49.4665    82
55303 70.8035  2.4323 49.4642    49
55305 70.8799  2.4249 49.4738   102
55309 70.9500  2.4188 49.4825   106
55310 70.9931  2.4163 49.4873   114
55311 71.0639  2.4025 49.4982   105
55312 71.1306  2.3977 49.4923    94
55401 71.5104  2.2992 49.6938    59
55501 71.5729  2.1980 49.5823    60
55601 71.6229  2.3257 49.6003   107
55701 71.6694  2.4333 49.6163    48
55801 71.7153  2.4481 49.5498    70
55901 71.7708  2.3230 49.5320    74
56002 71.8701  2.1920 49.5166    60
56101 71.9444  2.0166 49.4921    80
56202 72.0146  2.0229 49.4222    91
56301 72.0944  2.2243 49.4533    94
56401 72.1785  2.4260 49.4831    99
56501 72.2653  2.2504 49.3876    92
57002 73.0938  2.0528 49.4290    68
57004 73.2424  2.0623 49.4161    80
57007 73.3313  2.0460 49.4046    65
57009 73.3910  2.0159 49.3953    68
57011 73.4437  2.0808 49.3961    97
57014 73.5132  2.0758 49.3917    77
57015 73.6062  2.0942 49.3895    71
57201 73.6771  2.0907 49.4149    60
57301 73.7278  2.1101 49.4456    55
57401 73.7806  2.1340 49.4759    55
58002 75.1028  2.2535 49.1313    81
58006 75.2104  2.2831 49.1212    94
58010 75.3097  2.2833 49.1215    98
58012 75.4090  2.3130 49.1255    98
58014 75.5111  2.3391 49.1199   123
58018 75.5910  2.3675 49.1156    87
58101 75.7583  2.4985 49.2278    79
58301 76.0021  2.3273 49.2437   126
58401 76.1576  2.1509 49.2640   109
58501 76.3153  2.1170 49.4157    94
58602 76.5903  2.3662 49.3119   108
58701 76.7451  2.1138 49.5314   103
58703 76.7986  2.1110 49.5229   122
58710 76.9875  2.1059 49.5218    85
58714 77.0639  2.0943 49.5115   115
58715 77.1493  2.1037 49.5056    99
58716 77.2146  2.0978 49.5038   105
59001 77.8785  2.3043 49.3965    90
59101 78.2729  2.4551 49.3985   114
59103 78.3313  2.4386 49.4051   108
59107 78.4382  2.4310 49.4258   114
59111 78.5743  2.4140 49.4376   109
59303 78.9722  2.4330 49.4586   103
59306 79.0361  2.4391 49.4686   114
59309 79.1285  2.4527 49.4790   118
59312 79.2285  2.4521 49.4785   105
59314 79.3340  2.4556 49.4792   112
59316 79.4965  2.4477 49.4808   115
59317 79.5292  2.4589 49.4842   113
59318 79.6868  2.4737 49.4920    80
